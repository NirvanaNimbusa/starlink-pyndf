/* Declare/revert numerical error handling functions for SUN4 systems.	    */

#include <signal.h>
#include <sys/ieeefp.h>
#include <floatingpoint.h>
#include <math.h>
#include "sae_par.h"		 /* Standard SAE_ constants		    */
#include "prm_err.h"		 /* PRM_ error codes			    */

/* Global Variable Definitions:						    */
   volatile struct		 /* Fortran NUM_CMN common block.	    */
   {
      int num_error;		 /* Global numerical error status	    */
   } num_cmn_;

/* Static Variables:							    */
   static struct		 /* Accumulated IEEE exception flags	    */
   {
      int division;
      int invalid;
      int overflow;
   } oldflag;
   static struct		 /* Saved IEEE exception handlers	    */
   {
      sigfpe_handler_type division;
      sigfpe_handler_type intdiv;
      sigfpe_handler_type intovf;
      sigfpe_handler_type invalid;
      sigfpe_handler_type overflow;
   } oldhand;

   void num_handl_( void ( *routin )() )
   {
/*
*+
*  Name:
*     NUM_HANDL

*  Purpose:
*     Establish a handler for numerical errors.

*  Language:
*     C

*  Invocation:
*     CALL NUM_HANDL( ROUTIN )

*  Description:
*     This routine declares a signal handler to handle numerical errors
*     such as overflow or divide by zero.

*  Arguments:
*     ROUTIN = SUBROUTINE (Given)
*        The numerical error handler.  It should be declared as
*        EXTERNAL in the routine which calls NUM_HANDL. The routine
*        NUM_TRAP is provided for this purpose.

*  Machine-specific features used:
*     This routine is specific to SUN4 systems.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     30-OCT-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}
*-
*/

/* Local Variables:							    */
      char *out;		 /* ieee_flags output argument (junk)	    */
      int code;			 /* ieee_flags accumulated exceptions mask  */

/*.									    */

/* Save the existing IEEE handler for each relevant arithmetic exception.   */
      oldhand.division =
      (sigfpe_handler_type) ieee_handler( "get", "division", oldhand.division );
      oldhand.invalid =
      (sigfpe_handler_type) ieee_handler( "get", "invalid", oldhand.invalid );
      oldhand.overflow =
      (sigfpe_handler_type) ieee_handler( "get", "overflow", oldhand.overflow );

/* Obtain the accumulated IEEE exception flags for each significant type of */
/* exception.								    */
      code = ieee_flags( "get", "exception", "", &out );
      oldflag.division = ( code >> fp_division ) & 0x1;
      oldflag.invalid = ( code >> fp_invalid ) & 0x1;
      oldflag.overflow = ( code >> fp_overflow ) & 0x1;

/* Establish the new handler for the significant IEEE exceptions.	    */
      (void) ieee_handler( "set", "common", (sigfpe_handler_type) routin );

/* Establish the same handler for "integer divide by zero" traps and save   */
/* the previous handler of such traps. (Note there appears to be an anomaly */
/* in the type of the final argument - "*routine" is needed to make it	    */
/* work, although the documentation and the argument's declared type	    */
/* suggests that "routine" should be used.)				    */
      oldhand.intdiv = sigfpe( FPE_INTDIV_TRAP, (sigfpe_handler_type) *routin );

/* Also do this for "integer overflow". These traps don't actually happen   */
/* at present (gasp!), but one day perhaps...?				    */
      oldhand.intdiv = sigfpe( FPE_INTOVF_TRAP, (sigfpe_handler_type) *routin );

/* Exit the routine.							    */
      return;
   }

   void num_revrt_( void )
   {
/*
*+
*  Name:
*     NUM_REVRT

*  Purpose:
*     Revert to original numerical error behaviour.

*  Language:
*     C

*  Invocation:
*     CALL NUM_REVRT

*  Description:
*     This routine causes the handling of numerical errors to revert to
*     its original behaviour after a previous call to NUM_HANDL. Note
*     that although matching calls to NUM_HANDL and NUM_REVRT cancel,
*     they may not be nested.

*  Machine-specific features used:
*     This version is specific to SUN4 syatems.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     30-OCT-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/*.									    */

/* Local Variables:							    */
      char *out;		 /* ieee_flags output argument (junk)	    */

/* Re-establish the saved IEEE exception handlers.			    */
      (void) ieee_handler( "set", "division", oldhand.division );
      (void) ieee_handler( "set", "invalid", oldhand.invalid );
      (void) ieee_handler( "set", "overflow", oldhand.overflow );

/* Restore the relevant accumulated IEEE exception flags to their previous  */
/* values.								    */
      (void) ieee_flags( oldflag.invalid ? "set" : "clear",
                         "exception", "invalid", &out );
      (void) ieee_flags( oldflag.overflow ? "set" : "clear",
                         "exception", "overflow", &out );
      (void) ieee_flags( oldflag.division ? "set" : "clear",
                         "exception", "division", &out );

/* Re-establish the saved handlers for integer division and overflow.	    */
      (void) sigfpe( FPE_INTDIV_TRAP, oldhand.intdiv );
      (void) sigfpe( FPE_INTOVF_TRAP, oldhand.intovf );


/* Exit the routine.							    */
      return;
   }   

   int matherr()
   {
/*+									    */
/* Name:								    */
/*    matherr								    */

/* Purpose:								    */
/*    Replace standard maths library matherr routine.			    */

/* Invocation:								    */
/*    matherr( );							    */
/*									    */
/* Description:								    */
/*    This function replaces the standard matherr routine in the maths	    */
/*    library. It does nothing and is simply intended to supress the	    */
/*    printing of warning messages when argument errors occur in calls to   */
/*    maths library functions.						    */

/* Parameters:								    */
/*    void								    */

/* Returned Value:							    */
/*    void								    */

/* Authors:								    */
/*    RFWS: R.F. Warren-Smith (STARLINK)				    */
/*    {@enter_new_authors_here@}					    */

/* History:								    */
/*    4-NOV-1991 (RFWS):						    */
/*       Original version.						    */
/*    {@enter_changes_here@}						    */

/* Bugs:								    */
/*    {@note_any_bugs_here@}						    */

/*-									    */

/*.									    */

/* Exit the routine.							    */
     return 1; /* Must return something */
   }

   void num_trap_( int sig, int code, struct sigcontext *scp, char *addr )
   {
/*
*+
*  Name:
*     NUM_TRAP

*  Purpose:
*     Handle numerical errors.

*  Language:
*     C

*  Invocation:
*     CALL NUM_HANDL( NUM_TRAP )

*  Description:
*     This routine is intended to be passed to NUM_HANDL as a handler
*     for numerical errors. Once established, any numerical error will
*     be handled by this routine until NUM_REVRT is called. If the
*     global variable NUM_ERROR is set to SAI__OK, NUM_TRAP will set it
*     to a suitable error status value in response to the numerical
*     error, otherwise it will leave its value unchanged.

*  Arguments:
*     There is no need to refer to this routine's arguments in order to
*     use it.

*  Machine-specific features used:
*     This version is specific to SUN4 systems.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     30-OCT-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables:							    */
      volatile int *num_error;	 /* Pointer to common block status variable */

/*.									    */

/* Obtain a pointer to the Fortran common block numerical error status	    */
/* variable.								    */
      num_error = &( num_cmn_.num_error );

/* If the numerical error status is not already set, then test for each	    */
/* relevant SIGFPE signal code in turn and assign the appropriate status    */
/* value.								    */
      if ( *num_error == SAI__OK )
      {
         switch ( code )
         {
            case FPE_INTDIV_TRAP:	  /* Integer divide by zero	    */
	        *num_error = PRM__INTDZ;
	        break;

	    case FPE_INTOVF_TRAP:	  /* Integer overflow		    */
	        *num_error = PRM__INTOF;
	        break;

	    case FPE_FLTDIV_TRAP:	  /* Floating divide by zero	    */
	        *num_error = PRM__FLTDZ;
	        break;

	    case FPE_FLTOPERR_TRAP:	  /* Invalid argument/operand	    */
	        *num_error = PRM__ARGIN;
	        break;

	    case FPE_FLTOVF_TRAP:	  /* Floating overflow		    */
	        *num_error = PRM__FLTOF;
	        break;
	 }
      }

/* Exit the routine.							    */
      return;
   }
