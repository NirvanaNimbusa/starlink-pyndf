/* Declare/revert numerical error handling functions for MIPS systems.	    */

#include <signal.h>
#include <mips/cpu.h>		 /* Signal code definitions		    */
#include <mips/fpu.h>		 /* Floating point unit definitions	    */
#include "sae_par.h"		 /* Standard SAE_ constants		    */
#include "prm_err.h"		 /* PRM_ error codes			    */

/* Global Variable Definitions:						    */
   volatile struct		 /* Fortran NUM_CMN common block.	    */
   {
      int num_error;		 /* Global numerical error status	    */
   } num_cmn_;

/* Static Variables:							    */
   static struct		 /* IEEE exception enable flags		    */
   {
      unsigned int divide0 : 1;
      unsigned int invalid : 1;
      unsigned int overflow : 1;
   } olden;
   static struct		 /* Accumulated IEEE exception flags	    */
   {
      unsigned int divide0 : 1;
      unsigned int invalid : 1;
      unsigned int overflow : 1;
   } oldse;
   static void ( *oldhand_fpe )(); /* Saved SIGFPE signal action	    */
   static void ( *oldhand_trap )(); /* Saved SIGTRAP signal action	    */

   void num_handl_( void ( *routin )() )
   {
/*
*+
*  Name:
*     NUM_HANDL

*  Purpose:
*     Establish a handler for numerical errors.

*  Language:
*     C

*  Invocation:
*     CALL NUM_HANDL( ROUTIN )

*  Description:
*     This routine declares a signal handler to handle numerical errors
*     such as overflow or divide by zero.

*  Arguments:
*     ROUTIN = SUBROUTINE (Given)
*        The numerical error handler.  It should be declared as
*        EXTERNAL in the routine which calls NUM_HANDL. The routine
*        NUM_TRAP is provided for this purpose.

*  Machine-specific features used:
*     This routine is specific to DECstation (MIPS) systems.

*  Copyright:
*     Copyright (C) 1991 Science & Engineering Research Council.
*     All Rights Reserved.

*  Licence:
*     This program is free software; you can redistribute it and/or
*     modify it under the terms of the GNU General Public License as
*     published by the Free Software Foundation; either version 2 of
*     the License, or (at your option) any later version.
*     
*     This program is distributed in the hope that it will be
*     useful,but WITHOUT ANY WARRANTY; without even the implied
*     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
*     PURPOSE. See the GNU General Public License for more details.
*     
*     You should have received a copy of the GNU General Public License
*     along with this program; if not, write to the Free Software
*     Foundation, Inc., 51 Franklin Street,Fifth Floor, Boston, MA
*     02110-1301, USA

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     4-NOV-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}
*-
*/

/* Local Variables:							    */
      union fpc_csr csr;	 /* IEEE control and status register	    */

/*.									    */

/* Obtain the IEEE control and status register contents and extract the	    */
/* enable exception flags for each significant type of exception.	    */
      csr.fc_word = get_fpc_csr();
      olden.divide0 = csr.fc_struct.en_divide0;
      olden.invalid = csr.fc_struct.en_invalid;
      olden.overflow = csr.fc_struct.en_overflow;

/* Also extract the accumulated exception flags for each significant type   */
/* of exception.							    */
      oldse.divide0 = csr.fc_struct.se_divide0;
      oldse.invalid = csr.fc_struct.se_invalid;
      oldse.overflow = csr.fc_struct.se_overflow;

/* Enable signalling of the required IEEE arithmetic exceptions.	    */
      csr.fc_struct.en_divide0 = 1;
      csr.fc_struct.en_invalid = 1;
      csr.fc_struct.en_overflow = 1;

/* Set the new control and status register value.			    */
      (void) set_fpc_csr( csr.fc_word );

/* Establish the new handler for SIGFPE and SIGTRAP signals, saving the old */
/* signal actions.							    */
      oldhand_fpe = signal( SIGFPE, routin );
      oldhand_trap = signal( SIGTRAP, routin );

/* Exit the routine.							    */
      return;
   }

   void num_revrt_( void )
   {
/*
*+
*  Name:
*     NUM_REVRT

*  Purpose:
*     Revert to original numerical error behaviour.

*  Language:
*     C

*  Invocation:
*     CALL NUM_REVRT

*  Description:
*     This routine causes the handling of numerical errors to revert to
*     its original behaviour after a previous call to NUM_HANDL. Note
*     that although matching calls to NUM_HANDL and NUM_REVRT cancel,
*     they may not be nested.

*  Machine-specific features used:
*     This version is specific to DECstation (MIPS) systems.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     30-OCT-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables:							    */
      union fpc_csr csr;	 /* IEEE control and status register	    */

/*.									    */

/* Obtain the IEEE control and status register contents and restore the	    */
/* saved state of the enable exception flags.				    */
      csr.fc_word = get_fpc_csr();
      csr.fc_struct.en_divide0 = olden.divide0;
      csr.fc_struct.en_invalid = olden.invalid;
      csr.fc_struct.en_overflow = olden.overflow;

/* Also restore the saved accumulated exception flag values for those	    */
/* exceptions which have been handled.					    */
      csr.fc_struct.se_divide0 = oldse.divide0;
      csr.fc_struct.se_invalid = oldse.invalid;
      csr.fc_struct.se_overflow = oldse.overflow;

/* Restore the IEEE control and status register value.			    */
      (void) set_fpc_csr( csr.fc_word );

/* Re-establish the old SIGFPE and SIGTRAP signal actions.		    */
      (void) signal( SIGFPE, oldhand_fpe );
      (void) signal( SIGTRAP, oldhand_trap );

/* Exit the routine.							    */
      return;
   }   

   int matherr()
   {
/*+									    */
/* Name:								    */
/*    matherr								    */

/* Purpose:								    */
/*    Replace standard maths library matherr routine.			    */

/* Invocation:								    */
/*    matherr( );							    */
/*									    */
/* Description:								    */
/*    This function replaces the standard matherr routine in the maths	    */
/*    library. It does nothing and is simply intended to supress the	    */
/*    printing of warning messages when argument errors occur in calls to   */
/*    maths library functions.						    */

/* Parameters:								    */
/*    void								    */

/* Returned Value:							    */
/*    void								    */

/* Authors:								    */
/*    RFWS: R.F. Warren-Smith (STARLINK)				    */
/*    {@enter_new_authors_here@}					    */

/* History:								    */
/*    4-NOV-1991 (RFWS):						    */
/*       Original version.						    */
/*    {@enter_changes_here@}						    */

/* Bugs:								    */
/*    {@note_any_bugs_here@}						    */

/*-									    */

/*.									    */

/* Exit the routine.							    */
      return 1; /* Must return something */
   }

   void num_trap_( int sig, int code, struct sigcontext *scp )
   {
/*
*+
*  Name:
*     NUM_TRAP

*  Purpose:
*     Handle numerical errors.

*  Language:
*     C

*  Invocation:
*     CALL NUM_HANDL( NUM_TRAP )

*  Description:
*     This routine is intended to be passed to NUM_HANDL as a handler
*     for numerical errors. Once established, any numerical error will
*     be handled by this routine until NUM_REVRT is called. If the
*     global variable NUM_ERROR is set to SAI__OK, NUM_TRAP will set it
*     to a suitable error status value in response to the numerical
*     error, otherwise it will leave its value unchanged.

*  Arguments:
*     There is no need to refer to this routine's arguments in order to
*     use it.

*  Machine-specific features used:
*     This version is specific to DECstation (MIPS) systems.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK, RAL)
*     {enter_new_authors_here}

*  History:
*     4-NOV-1991 (RFWS):
*        Original version.
*     {enter_changes_here}

*  Bugs:
*     {note_any_bugs_here}

*-
*/

/* Local Variables:							    */
      int handled;		 /* Signal handled in this routine?	    */
      union fpc_csr csr;	 /* IEEE control and status register	    */
      unsigned long int branch_instruction; /* Target of branch instruction */
      volatile int *num_error;	 /* Pointer to common block status variable */

/*.									    */

/* Obtain a pointer to the Fortran common block numerical error status	    */
/* variable.								    */
      num_error = &( num_cmn_.num_error );

/* Assume the signal will be handled by this routine.			    */
      handled = 1;

/* Test for each recognised signal...					    */
      switch ( sig )
      {

/* If a floating point exception has occurred, take no action unless the    */
/* global error flag is still clear.					    */
         case SIGFPE:
	 {
	    if ( *num_error == SAI__OK )
	    {

/* Test for each accompanying signal code...				    */
               switch ( code )
               {

/* If this is an IEEE exception, then obtain the floating point control and */
/* status register contents from the signal context structure.		    */
                  case 0:
		  {
                     csr.fc_word = (unsigned long int) scp->sc_fpc_csr;

/* Test the floating point control and status register exception flags to   */
/* identify the exception, and set the appropriate value for the global	    */
/* error flag...							    */

/* Floating overflow:							    */
		     if ( csr.fc_struct.ex_overflow )
		     {
	                *num_error = PRM__FLTOF;
		     }

/* Floating divide by zero:						    */
		     else if ( csr.fc_struct.ex_divide0 )
		     {
	                *num_error = PRM__FLTDZ;
		     }

/* Classify anything else as "invalid argument/operand".		    */
		     else
		     {
	                *num_error = PRM__ARGIN; /* Argument invalid	    */
		     }
		  }
	          break;

/* Also test for integer overflow exceptions (these no not appear to	    */
/* actually happen at the time of writing).				    */
	          case EXC_OV:
		  {
	             *num_error = PRM__INTOF;
		  }
	          break;
	       }
	    }
	 }
	 break;

/* If this is a SIGTRAP signal, then it may indicate an arithmetic error,   */
/* or some other event which we do not wish to handle. Test for recognised  */
/* values of the accompanying signal code, setting appropriate values for   */
/* the global error flag, if not already set.				    */
	 case SIGTRAP:
	 {
	    switch( code )
	    {

/* Integer overflow:							    */
	       case BRK_OVERFLOW:
	       {
	          if ( *num_error == SAI__OK )
		  {
		     *num_error = PRM__INTOF;
		  }
	       }
	       break;

/* Integer divide by zero:						    */
	       case BRK_DIVZERO:
	       {
	          if ( *num_error == SAI__OK )
		  {
		     *num_error = PRM__INTDZ;
		  }
	       }
	       break;

/* For other code values, we must emulate the SIGTRAP signal action which   */
/* was in effect before this handler was established. Note that the signal  */
/* was not handled in this routine.					    */
               default:
	       {
		  handled = 0;

/* If the previous action was the default (i.e. to abort), then do so now.  */
	          if ( oldhand_trap == SIG_DFL )
		  {
		     abort();
		  }

/* If the previous action was to ignore the signal, then do so. Otherwise   */
/* invoke the previous signal handler.					    */
		  else if ( oldhand_trap != SIG_IGN )
		  {
		     oldhand_trap( sig, code, scp );
		  }
	       }
               break;
	    }
	 }
	 break;
      }

/* If the signal was handlen in this routine, then step over the	    */
/* instruction which caused the exception.				    */
      if ( handled )
      {
         if ( scp->sc_cause & CAUSE_BD )
         {
            branch_instruction = *(unsigned long int *) ( scp->sc_pc );
            emulate_branch( scp, branch_instruction );
         }
         else
         {
            scp->sc_pc += 4;
         }
      }

/* Exit the routine.							    */
      return;
   }
