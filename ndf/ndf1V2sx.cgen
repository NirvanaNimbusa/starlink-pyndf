#include <math.h>
#include "sae_par.h"
#include "dat_par.h"
#include "ndf_err.h"
#include "prm_par.h"
#include "ndf1.h"
#include <string.h>
#include "mers.h"

void CGEN_FUNCTION(ndf1V2s)( int bad, size_t el, CGEN_TYPE array[],
                             int *dce, int *status ){
/*
*+
*  Name:
*     ndf1V2s<T>

*  Purpose:
*     Convert generic variance values to standard deviations.

*  Synopsis:
*     void ndf1V2s<T>( int bad, size_t el, CGEN_TYPE array[], int *dce,
*                      int *status )

*  Description:
*     This function converts a vectorised generic array of variance values
*     into standard deviations by taking the square root. It checks for
*     "bad" values if required. If a negative variance value is found, then
*     "status" is set to NDF__NGVAR, an error is reported, and a "bad"
*     value is assigned to the affected array element - however, the
*     function continues to process the entire array.

*  Parameters:
*     bad
*        Whether it is necessary to check for bad values.
*     el
*        Number of array elements to process.
*     array
*        On input, an array of generic variance values is supplied. On
*        output, they are replaced by the standard deviation values. The
*        supplied "array" array should have at least "el" elements.
*     *dce
*        Returned holding the whether a data conversion error occurred
*        resulting in the introduction of new bad values into the array.
*        This will be due to replacement of illegal negative variance
*        values.
*     *status
*        The global status.

*  Notes:
*     -  This function works through the array backwards. This is to
*     minimise page faulting on a virtual memory machine, since it will
*     usually be followed by a data-processing loop which passes forwards
*     through the same array.

*  Authors:
*     RFWS: R.F. Warren-Smith (STARLINK)
*     DSB: David S. Berry (EAO)

*  History:
*     3-APR-2019 (DSB):
*        Original version, based on equivalent Fortran function by RFWS.

*-
*/

/* Local Variables: */
   CGEN_TYPE errval;     /* Value causing last error */
   int errval_set;       /* Has a value been assigned to errval? */
   size_t i;             /* Loop counter for array elements */
   size_t nneg;          /* Number of negative variance values */

/* Check inherited global status. */
   if( *status != SAI__OK ) return;

/* Initialise the count of negative variance values and the data
   conversion error flag. */
   nneg = 0;
   *dce = 0;
   errval = 0;
   errval_set = 0;

/* If required, loop through the array without checking for bad values. */
   if( !bad ) {
      for( i = 0; i < el; i++ ){

/* If the data type is not an unsigned quantity, then check if the
   variance value is negative. */
         if( CGEN_CODE_TYPE != CGEN_UBYTE_TYPE &&
             CGEN_CODE_TYPE != CGEN_UWORD_TYPE && array[i] < 0 ){

/* If it is negative, then count it, note a data conversion error and
   assign a bad value to the array element. */
            nneg++;
            *dce = 1;
            if( ! errval_set ) {
               errval_set = 1;
               errval = array[ i ];
            }
            array[ i ] = CGEN_BAD;

/* Otherwise, take the square root. */
         } else {
            array[ i ] = sqrt( array[ i ] );
         }
      }

/* If required, loop through the array checking for bad values. */
   } else {
      for( i = 0; i < el; i++ ){

/* Perform the bad value check. */
         if( array[ i ] != CGEN_BAD ) {

/* If the data type is not an unsigned quantity, then check if the
   variance value is negative. */
            if( CGEN_CODE_TYPE != CGEN_UBYTE_TYPE &&
                CGEN_CODE_TYPE != CGEN_UWORD_TYPE && array[i] < 0 ){
               nneg++;
               *dce = 1;
               if( ! errval_set ) {
                  errval_set = 1;
                  errval = array[ i ];
               }
               array[ i ] = CGEN_BAD;

/* Take the square root. */
            } else {
               array[ i ] = sqrt( array[ i ] );
            }
         }
      }
   }

/* If negative variance values were encountered, then report an error. */
   if( nneg != 0 ) {
      *status = NDF__NGVAR;
      msgSeti( "NNEG", nneg );
      msgSetd( "ERRVAL", (double) errval );
      errRep( " ", "^NNEG illegal negative variance value(s) encountered "
              "(first offending value was ^ERRVAL).", status );
   }

/* Call error tracing function and exit. */
   if( *status != SAI__OK ) ndf1Trace( "ndf1V2S<T>", status );

}

